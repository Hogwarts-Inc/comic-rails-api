---
openapi: 3.0.1
info:
  title: API V1
  version: '1.0.0'
paths:
  "/api/v1/canvas":
    get:
      summary: list canvas
      responses:
        '200':
          description: successful
    post:
      summary: create canvas
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                chapter_id:
                  type: integer
                images:
                  type: array
                  items:
                    type: string
                    format: binary
              required:
                - chapter_id
                - images
      responses:
        '200':
          description: successful
  "/api/v1/canvas/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show canva
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful
    patch:
      summary: update canva
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/canvaBody'
      responses:
        '200':
          description: successful
    put:
      summary: update canva
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/canvaBody'
      responses:
        '200':
          description: successful
    delete:
      summary: delete canva
      responses:
        '200':
          description: successful
  "/api/v1/storiettes":
    get:
      summary: list storiettes
      responses:
        '200':
          description: successful
    post:
      summary: create storiette
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/storietteBody'
      responses:
        '200':
          description: successful
  "/api/v1/storiettes/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show storiette
      responses:
        '200':
          description: successful
    patch:
      summary: update storiette
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/storietteBody'
      responses:
        '200':
          description: successful
    put:
      summary: update storiette
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/storietteBody'
      responses:
        '200':
          description: successful
    delete:
      summary: delete storiette
      responses:
        '200':
          description: successful
  "/api/v1/likes":
    get:
      summary: list likes
      responses:
        '200':
          description: successful
    post:
      summary: create like
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/likeBody'
      responses:
        '200':
          description: successful
  "/api/v1/likes/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show like
      responses:
        '200':
          description: successful
    patch:
      summary: update like
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/likeBody'
      responses:
        '200':
          description: successful
    put:
      summary: update like
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/likeBody'
      responses:
        '200':
          description: successful
    delete:
      summary: delete like
      responses:
        '200':
          description: successful
  "/api/v1/opinions":
    get:
      summary: list opinions
      responses:
        '200':
          description: successful
    post:
      summary: create opinion
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/opinionBody'
      responses:
        '200':
          description: successful
  "/api/v1/opinions/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show opinion
      responses:
        '200':
          description: successful
    patch:
      summary: update opinion
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/opinionBody'
      responses:
        '200':
          description: successful
    put:
      summary: update opinion
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/opinionBody'
      responses:
        '200':
          description: successful
    delete:
      summary: delete opinion
      responses:
        '200':
          description: successful
  "/api/v1/chapters":
    get:
      summary: list chapters
      responses:
        '200':
          description: successful
    post:
      summary: create chapter
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/chapterBody'
      responses:
        '200':
          description: successful
  "/api/v1/chapters/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show chapter
      responses:
        '200':
          description: successful
    patch:
      summary: update chapter
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/chapterBody'
      responses:
        '200':
          description: successful
    put:
      summary: update chapter
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/chapterBody'
      responses:
        '200':
          description: successful
    delete:
      summary: delete chapter
      responses:
        '200':
          description: successful
  "/api/v1/graphic_resources":
    get:
      summary: list graphic_resources
      responses:
        '200':
          description: successful
    post:
      summary: create graphic_resource
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/graphicResourceBody'
      responses:
        '200':
          description: successful
  "/api/v1/graphic_resources/resource_for_type?resource_type={resource_type}":
    parameters:
    - name: resource_type
      in: path
      description: resource_type
      required: true
      schema:
        type: string
        enum: [character, dialog, object, background]
    get:
      summary: list graphic_resource by type
      responses:
        '200':
          description: successful
  "/api/v1/graphic_resources/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show graphic_resource
      responses:
        '200':
          description: successful
    patch:
      summary: update graphic_resource
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/graphicResourceBody'
      responses:
        '200':
          description: successful
    put:
      summary: update graphic_resource
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/graphicResourceBody'
      responses:
        '200':
          description: successful
    delete:
      summary: delete graphic_resource
      responses:
        '200':
          description: successful
  "/api/v1/characters":
    get:
      summary: list characters
      responses:
        '200':
          description: successful
    post:
      summary: create character
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/characterBody'
      responses:
        '200':
          description: successful
  "/api/v1/characters/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show character
      responses:
        '200':
          description: successful
    patch:
      summary: update character
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/characterBody'
      responses:
        '200':
          description: successful
    put:
      summary: update character
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/characterBody'
      responses:
        '200':
          description: successful
    delete:
      summary: delete character
      responses:
        '200':
          description: successful
  "/api/v1/descriptions":
    get:
      summary: list descriptions
      responses:
        '200':
          description: successful
    post:
      summary: create description
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/descriptionBody'
      responses:
        '200':
          description: successful
  "/api/v1/descriptions/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show description
      responses:
        '200':
          description: successful
    patch:
      summary: update description
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/descriptionBody'
      responses:
        '200':
          description: successful
    put:
      summary: update description
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/descriptionBody'
      responses:
        '200':
          description: successful
    delete:
      summary: delete description
      responses:
        '200':
          description: successful
  "/api/v1/conventions":
    get:
      summary: list conventions
      responses:
        '200':
          description: successful
    post:
      summary: create convention
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/conventionBody'
      responses:
        '200':
          description: successful
  "/api/v1/conventions/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show convention
      responses:
        '200':
          description: successful
    patch:
      summary: update convention
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/conventionBody'
      responses:
        '200':
          description: successful
    put:
      summary: update convention
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/conventionBody'
      responses:
        '200':
          description: successful
    delete:
      summary: delete convention
      responses:
        '200':
          description: successful
  "/api/v1/user_profiles":
    post:
      summary: create user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful
          examples:
            Nacho:
              value:
                id: 1
                name: Nacho Smith
                given_name: Nacho
                family_name: Smith
                email: nacho_smith@gmail.com
                picture: nil
                nft_url: nil
                sub: google-oauth2|1234949099349
                created_at: "2024-01-01"
                updated_at: "2024-01-01"
  "/api/v1/user_profiles/update_profile":
    patch:
      summary: update user profile
      security:
        - bearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/userProfileBody'
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'   # Reference to an object
              examples:
                Nacho:
                  value:
                    id: 1
                    name: Nacho Smith
                    given_name: Nacho
                    family_name: Smith
                    email: nacho_smith@gmail.com
                    picture: nil
                    nft_url: nil
                    sub: google-oauth2|1234949099349
                    created_at: "2024-01-01"
                    updated_at: "2024-01-01"
  "/api/v1/user_profiles/canvas":
    get:
      summary: get user profile canvas
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful
  "/api/v1/user_profiles/info":
    get:
      summary: get user profile information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Canva:
      type: object
      required:
        - image
        - chapter_id
      optional:
        - title
        - active
      properties:
        image:
          type: string
          format: base64
        chapter_id:
          type: integer
        title:
          type: string
        active:
          type: boolean
    Storiette:
      type: object
      required:
        - image
        - title
      optiona:
        - description
        - active
    Chapter:
      type: object
      required:
        - title
        - storiette_id
      optional:
        - description
        - active
    GraphicResource:
      type: object
      required:
        - image
        - resource_type
      properties:
        resource_type:
          type: integer
          enum: [dialog, object, background]
        image:
          type: string
          format: base64
    Character:
      type: object
      required:
        - images
        - name
      optional:
        - active
        - description_ids
      properties:
        name:
          type: string
        images:
          type: string
          format: base64
        description_ids:
          type: array
        active:
          type: boolean
    Convention:
      type: object
      required:
        - name
        - image
      optional:
        - active
        - description_ids
      properties:
        name:
          type: string
        image:
          type: string
          format: base64
        active:
          type: boolean
        description_ids:
          type: array
    Description:
      type: object
      required:
        - title
        - text
        - descriptionable_type
        - descriptionable_id
      optional:
        - active
    Opinion:
      type: object
      required:
        - text
        - canva_id
        - user_profile_id
      optional:
        - active
    Like:
      type: object
      required:
        - canva_id
        - user_profile_id
    UserProfile:
      type: object
      required:
        - given_name
        - family_name
        - email
        - image
      optional:
        - nft_url
        - picture
      properties:
        given_name:
          type: string
        family_name:
          type: string
        image:
          type: string
          format: base64
        email:
          type: string
        picture:
          type: string
        nft_url:
          type: string
  requestBodies:
    storietteBody:
      description: A JSON object containing storiette information
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Storiette'
          example:
            storiette:
              title: Storiette number 1#
              description: "Storiette number 1"
              active: true
    chapterBody:
      description: A JSON object containing chapter information
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Chapter'
          example:
            chapter:
              title: Chapter number 1#
              description: "Chapter number 1"
              storiette_id: 1
              active: true
    canvaBody:
      description: A JSON object containing canva information
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/Canva'
    graphicResourceBody:
      description: A JSON object containing graphic resource information
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/GraphicResource'
    characterBody:
      description: A JSON object containing character information
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/Character'
    likeBody:
      description: A JSON object containing like information
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/Like'
    opinionBody:
      description: A JSON object containing opinion information
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/Opinion'
    descriptionBody:
      description: A JSON object containing description information
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Description'
          example:
            description:
              title: 'Description title'
              text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'
              descriptionable_type: 'Character'
              descriptionable_id: 1
              active: true
    conventionBody:
      description: A JSON object containing convention information
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/Convention'
    userProfileBody:
      description: A JSON object containing user profile information
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/UserProfile'
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:4000
